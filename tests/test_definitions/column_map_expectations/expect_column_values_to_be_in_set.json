{
  "expectation_type": "expect_column_values_to_be_in_set",
  "datasets" : [{
    "dataset_name": "expect_column_values_to_be_in_set_1",
    "data" : {
      "w" : ["AK", "HI", "PR"],
      "x" : [1,2,4],
      "y" : [1.1,2.2,5.5],
      "z" : ["hello", "jello", "mello"]
    },
    "tests" : [
      {
        "title": "basic_positive_test_case_number_set",
        "include_in_gallery": true,
        "exact_match_out": false,
        "in": {
          "column": "x",
          "value_set": [1,2,4]
        },
        "out": {
          "success": true
        }
      },
      {
        "title": "empty_value_set",
        "exact_match_out": false,
        "in": {
          "column": "x",
          "value_set": []
        },
        "out": {
          "success": false
        }
      },
      {
        "title": "negative_test_case_exclude_existing_column_value",
        "include_in_gallery": true,
        "exact_match_out": false,
        "in": {
          "column": "x",
          "value_set": [2, 4]
        },
        "out": {
          "success": false,
          "unexpected_index_list":[{"x": 1, "pk_index": 0}],
          "unexpected_list": [1]
        }
      },
      {
        "title": "negative_empty_values_set",
        "exact_match_out": false,
        "in": {
          "column": "x",
          "value_set": []
        },
        "out": {
          "success": false,
          "unexpected_index_list": [{"x": 1, "pk_index": 0}, {"x": 2, "pk_index": 1}, {"x": 4, "pk_index": 2}],
          "unexpected_list": [1, 2, 4]
        }
      },
      {
        "title": "basic_positive_strings_set",
        "exact_match_out": false,
        "in": {
          "column": "z",
          "value_set": ["hello", "jello", "mello"]
        },
        "out": {
          "success": true
        }
      },
      {
        "title": "negative_test_strings_set_extra_value_in_column",
        "exact_match_out": false,
        "in": {
          "column": "z",
          "value_set": ["hello", "jello"]
        },
        "out": {
          "success": false,
          "unexpected_index_list": [{"z": "mello", "pk_index": 2}],
          "unexpected_list": ["mello"]
        }
      },
      {
        "title": "negative_test_numbers_set_no_matching_values",
        "exact_match_out": false,
        "in": {
          "column": "x",
          "value_set": [3]
        },
        "out": {
          "success": false,
          "unexpected_index_list": [{"x": 1, "pk_index": 0}, {"x": 2, "pk_index": 1}, {"x": 4, "pk_index": 2}],
          "unexpected_list": [1, 2, 4]
        }
      },
      {
        "title": "positive_test_float_set",
        "exact_match_out": false,
        "in": {
          "column": "y",
          "value_set": [1.1, 2.2, 5.5]
        },
        "out": {
          "success": true
        }
      },
      {
        "title": "negative_test_float_set",
        "exact_match_out": false,
        "in": {
          "column": "y",
          "value_set": [1.11, 2.22, 5.51]
        },
        "out": {
          "success": false,
          "unexpected_index_list": [{"y": 1.1, "pk_index": 0}, {"y": 2.2, "pk_index": 1}, {"y": 5.5, "pk_index": 2}],
          "unexpected_list": [1.1, 2.2, 5.5]
        }
      },
      {
        "title": "positive_test_two_character_set",
        "exact_match_out": false,
        "in": {
          "column": "w",
          "value_set": ["HI", "PR", "AK"]
        },
        "out": {
          "success": true
        }
      },
    {
      "title": "test_conditional_expectation_passes",
      "only_for": ["pandas"],
      "exact_match_out": false,
      "in": {
        "column": "z",
        "value_set": ["hello"],
        "catch_exceptions": true,
       "row_condition": "x == \"1\"",
        "condition_parser": "pandas"
      },
      "out": {
        "success": true,
        "unexpected_index_list": [],
        "unexpected_list": []
      }
    },
    {
      "title": "test_conditional_expectation_fails",
      "only_for": ["pandas"],
      "exact_match_out": false,
      "in": {
        "column": "z",
        "value_set": ["jello"],
        "catch_exceptions": true,
        "row_condition": "x == 1",
        "condition_parser": "pandas"
      },
      "out": {
        "success": false,
        "unexpected_index_list": [{"z": "hello", "pk_index": 0}],
        "unexpected_list": ["hello"]
      }
    },
    {
      "title": "test_conditional_expectation_parser_errors",
      "only_for": ["pandas"],
      "exact_match_out": false,
      "in": {
        "column": "z",
        "value_set": ["hello"],
        "catch_exceptions": true,
        "row_condition": "x == 1",
        "condition_parser": "bad_parser"
      },
      "out": {
        "traceback_substring": "not a valid enumeration member"
      }
    }
    ]},
    {
      "dataset_name": "expect_column_values_to_be_in_set_2",
      "data": {
        "empty_column": []
      },
      "schemas": {
        "postgresql": {
          "empty_column": "TEXT"
        },
        "mssql": {
          "empty_column": "VARCHAR"
        },
        "bigquery": {
          "empty_column": "STRING"
        },
        "redshift": {
          "empty_column": "VARCHAR"
        },
        "trino": {
          "empty_column": "VARCHAR"
        }
      },
      "tests": [{
        "title": "test_empty_column_should_be_vacuously_true",
        "exact_match_out": false,
        "in": {
          "column": "empty_column",
          "value_set": ["cat", "dog"],
          "catch_exceptions": false
        },
        "out": {
          "success": true
        }
      }]
  },
  {
    "dataset_name": "expect_column_values_to_be_in_set_3",
    "data" : {
      "dates" : ["2018-01-01", "2018-01-02", "2018-01-02 00:34:01"]
    },
    "schemas": {
      "pandas": {
        "dates": "datetime64"
      },
      "sqlite": {
        "dates": "DATETIME"
      },
      "postgresql": {
        "dates": "TIMESTAMP"
      },
      "mysql": {
        "dates": "TIMESTAMP"
      },
      "mssql": {
        "dates": "DATETIME"
      },
      "redshift": {
        "dates": "TIMESTAMP"
      },
      "snowflake": {
        "dates": "TIMESTAMP_NTZ"
      }
    },
    "tests" : []
  }]
}
