{
    "title": "Expect column median to be between",
    "description": "Expect the column median to be between a minimum value and a maximum value.\n\nExpectColumnMedianToBeBetween is a     Column Aggregate Expectation.\n\nColumn Aggregate Expectations are one of the most common types of Expectation.\nThey are evaluated for a single column, and produce an aggregate Metric, such as a mean, standard deviation, number of unique values, column type, etc.\nIf that Metric meets the conditions you set, the Expectation considers that data valid.\n\nArgs:\n    column (str):             The column name.\n    min_value (int or None):             The minimum value for the column median.\n    max_value (int or None):             The maximum value for the column median.\n    strict_min (boolean):             If True, the column median must be strictly larger than min_value, default=False\n    strict_max (boolean):             If True, the column median must be strictly smaller than max_value, default=False\n\nOther Parameters:\n    result_format (str or None):             Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY.             For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n    catch_exceptions (boolean or None):             If True, then catch exceptions and include them as part of the result object.             For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n    meta (dict or None):             A JSON-serializable dictionary (nesting allowed) that will be included in the output without             modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\nReturns:\n    An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\n    Exact fields vary depending on the values passed to result_format, catch_exceptions, and meta.\n\nNotes:\n    * min_value and max_value are both inclusive unless strict_min or strict_max are set to True.\n    * If min_value is None, then max_value is treated as an upper bound\n    * If max_value is None, then min_value is treated as a lower bound\n    * observed_value field in the result object is customized for this expectation to be a float             representing the true median for the column\n\nSee Also:\n    [ExpectColumnMeanToBeBetween](https://greatexpectations.io/expectations/expect_column_mean_to_be_between)\n    [ExpectColumnStdevToBeBetween](https://greatexpectations.io/expectations/expect_column_stdev_to_be_between)\n\nSupported Datasources:\n    [Pandas](https://docs.greatexpectations.io/docs/application_integration_support/)\n    [Spark](https://docs.greatexpectations.io/docs/application_integration_support/)\n    [SQLite](https://docs.greatexpectations.io/docs/application_integration_support/)\n    [PostgreSQL](https://docs.greatexpectations.io/docs/application_integration_support/)\n    [MySQL](https://docs.greatexpectations.io/docs/application_integration_support/)\n    [MSSQL](https://docs.greatexpectations.io/docs/application_integration_support/)\n    [Redshift](https://docs.greatexpectations.io/docs/application_integration_support/)\n    [BigQuery](https://docs.greatexpectations.io/docs/application_integration_support/)\n    [Snowflake](https://docs.greatexpectations.io/docs/application_integration_support/)\n\nData Quality Category:\n    Numerical data\n\nExample Data:\n            test    test2\n        0   1       1\n        1   1.3     7\n        2   .8      2.5\n        3   2       3\n\nCode Examples:\n    Passing Case:\n        Input:\n            ExpectColumnMedianToBeBetween(\n                column=\"test\",\n                min_value=1,\n                max_value=3\n        )\n\n        Output:\n            {\n              \"exception_info\": {\n                \"raised_exception\": false,\n                \"exception_traceback\": null,\n                \"exception_message\": null\n              },\n              \"result\": {\n                \"observed_value\": 1.15\n              },\n              \"meta\": {},\n              \"success\": true\n            }\n\n    Failing Case:\n        Input:\n            ExpectColumnMedianToBeBetween(\n                column=\"test2\",\n                min_value=3,\n                max_value=5\n        )\n\n        Output:\n            {\n              \"exception_info\": {\n                \"raised_exception\": false,\n                \"exception_traceback\": null,\n                \"exception_message\": null\n              },\n              \"result\": {\n                \"observed_value\": 2.75\n              },\n              \"meta\": {},\n              \"success\": false\n            }",
    "type": "object",
    "properties": {
        "id": {
            "title": "Id",
            "type": "string"
        },
        "meta": {
            "title": "Meta",
            "type": "object"
        },
        "notes": {
            "title": "Notes",
            "anyOf": [
                {
                    "type": "string"
                },
                {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            ]
        },
        "result_format": {
            "title": "Result Format",
            "default": "BASIC",
            "anyOf": [
                {
                    "$ref": "#/definitions/ResultFormat"
                },
                {
                    "type": "object"
                }
            ]
        },
        "description": {
            "title": "Description",
            "description": "A short description of your Expectation",
            "type": "string"
        },
        "catch_exceptions": {
            "title": "Catch Exceptions",
            "default": false,
            "type": "boolean"
        },
        "rendered_content": {
            "title": "Rendered Content",
            "type": "array",
            "items": {
                "type": "object"
            }
        },
        "windows": {
            "title": "Windows",
            "description": "Definition(s) for evaluation of temporal windows",
            "type": "array",
            "items": {
                "$ref": "#/definitions/Window"
            }
        },
        "batch_id": {
            "title": "Batch Id",
            "type": "string"
        },
        "column": {
            "title": "Column",
            "description": "The column name.",
            "minLength": 1,
            "type": "string"
        },
        "row_condition": {
            "title": "Row Condition",
            "type": "string"
        },
        "condition_parser": {
            "$ref": "#/definitions/ConditionParser"
        },
        "min_value": {
            "title": "Min Value",
            "description": "The minimum value for the column median.",
            "anyOf": [
                {
                    "type": "number"
                },
                {
                    "type": "object"
                },
                {
                    "type": "string",
                    "format": "date"
                },
                {
                    "type": "string",
                    "format": "date-time"
                }
            ]
        },
        "max_value": {
            "title": "Max Value",
            "description": "The maximum value for the column median.",
            "anyOf": [
                {
                    "type": "number"
                },
                {
                    "type": "object"
                },
                {
                    "type": "string",
                    "format": "date"
                },
                {
                    "type": "string",
                    "format": "date-time"
                }
            ]
        },
        "strict_min": {
            "title": "Strict Min",
            "description": "If True, the column median must be strictly smaller than max_value, default=False",
            "default": false,
            "type": "boolean"
        },
        "strict_max": {
            "title": "Strict Max",
            "description": "If True, the column median must be strictly larger than min_value, default=False",
            "default": false,
            "type": "boolean"
        },
        "metadata": {
            "type": "object",
            "properties": {
                "expectation_class": {
                    "title": "Expectation Class",
                    "type": "string",
                    "const": "ExpectColumnMedianToBeBetween"
                },
                "expectation_type": {
                    "title": "Expectation Type",
                    "type": "string",
                    "const": "expect_column_median_to_be_between"
                },
                "domain_type": {
                    "title": "Domain Type",
                    "type": "string",
                    "const": "column",
                    "description": "Column Aggregate"
                },
                "data_quality_issues": {
                    "title": "Data Quality Issues",
                    "type": "array",
                    "const": [
                        "Numerical data"
                    ]
                },
                "library_metadata": {
                    "title": "Library Metadata",
                    "type": "object",
                    "const": {
                        "maturity": "production",
                        "tags": [
                            "core expectation",
                            "column aggregate expectation"
                        ],
                        "contributors": [
                            "@great_expectations"
                        ],
                        "requirements": [],
                        "has_full_test_suite": true,
                        "manually_reviewed_code": true
                    }
                },
                "short_description": {
                    "title": "Short Description",
                    "type": "string",
                    "const": "Expect the column median to be between a minimum value and a maximum value."
                },
                "supported_data_sources": {
                    "title": "Supported Data Sources",
                    "type": "array",
                    "const": [
                        "Pandas",
                        "Spark",
                        "SQLite",
                        "PostgreSQL",
                        "MySQL",
                        "MSSQL",
                        "Redshift",
                        "BigQuery",
                        "Snowflake"
                    ]
                }
            }
        }
    },
    "required": [
        "column"
    ],
    "additionalProperties": false,
    "definitions": {
        "ResultFormat": {
            "title": "ResultFormat",
            "description": "An enumeration.",
            "enum": [
                "BOOLEAN_ONLY",
                "BASIC",
                "COMPLETE",
                "SUMMARY"
            ],
            "type": "string"
        },
        "Offset": {
            "title": "Offset",
            "description": "A threshold in which a metric will be considered passable",
            "type": "object",
            "properties": {
                "positive": {
                    "title": "Positive",
                    "type": "number"
                },
                "negative": {
                    "title": "Negative",
                    "type": "number"
                }
            },
            "required": [
                "positive",
                "negative"
            ],
            "additionalProperties": false
        },
        "Window": {
            "title": "Window",
            "description": "A definition for a temporal window across <`range`> number of previous invocations",
            "type": "object",
            "properties": {
                "constraint_fn": {
                    "title": "Constraint Fn",
                    "type": "string"
                },
                "parameter_name": {
                    "title": "Parameter Name",
                    "type": "string"
                },
                "range": {
                    "title": "Range",
                    "type": "integer"
                },
                "offset": {
                    "$ref": "#/definitions/Offset"
                }
            },
            "required": [
                "constraint_fn",
                "parameter_name",
                "range",
                "offset"
            ],
            "additionalProperties": false
        },
        "ConditionParser": {
            "title": "ConditionParser",
            "description": "Type of parser to be used to interpret a Row Condition.",
            "enum": [
                "great_expectations",
                "great_expectations__experimental__",
                "pandas",
                "spark"
            ],
            "type": "string"
        }
    }
}
