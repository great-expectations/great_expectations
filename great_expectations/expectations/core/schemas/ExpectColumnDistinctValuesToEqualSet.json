{
    "title": "Expect column distinct values to equal set",
    "description": "Expect the set of distinct column values to equal a given set.\n\nExpectColumnDistinctValuesToEqualSet is a     Column Aggregate Expectation.\n\nColumn Aggregate Expectations are one of the most common types of Expectation.\nThey are evaluated for a single column, and produce an aggregate Metric, such as a mean, standard deviation, number of unique values, column type, etc.\nIf that Metric meets the conditions you set, the Expectation considers that data valid.\n\nArgs:\n    column (str):             The column name.\n    value_set (set-like):             A set of objects used for comparison.\n\nOther Parameters:\n    result_format (str or None):             Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY.             For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n    catch_exceptions (boolean or None):             If True, then catch exceptions and include them as part of the result object.             For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n    meta (dict or None):             A JSON-serializable dictionary (nesting allowed) that will be included in the output without             modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\nReturns:\n    An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\n    Exact fields vary depending on the values passed to result_format, catch_exceptions, and meta.\n\nSee Also:\n    [ExpectColumnDistinctValuesToBeInSet](https://greatexpectations.io/expectations/expect_column_distinct_values_to_be_in_set)\n    [ExpectColumnDistinctValuesToContainSet](https://greatexpectations.io/expectations/expect_column_distinct_values_to_contain_set)\n\nSupported Datasources:\n    [Pandas](https://docs.greatexpectations.io/docs/application_integration_support/)\n    [Spark](https://docs.greatexpectations.io/docs/application_integration_support/)\n    [SQLite](https://docs.greatexpectations.io/docs/application_integration_support/)\n    [PostgreSQL](https://docs.greatexpectations.io/docs/application_integration_support/)\n    [MySQL](https://docs.greatexpectations.io/docs/application_integration_support/)\n    [MSSQL](https://docs.greatexpectations.io/docs/application_integration_support/)\n    [Redshift](https://docs.greatexpectations.io/docs/application_integration_support/)\n    [BigQuery](https://docs.greatexpectations.io/docs/application_integration_support/)\n    [Snowflake](https://docs.greatexpectations.io/docs/application_integration_support/)\n\nData Quality Category:\n    Sets\n\nExample Data:\n            test    test2\n        0   1       1\n        1   2       1\n        2   4       1\n\nCode Examples:\n    Passing Case:\n        Input:\n            ExpectColumnDistinctValuesToEqualSet(\n                column=\"test\",\n                value_set=[1, 2, 4]\n            )\n\n        Output:\n            {\n              \"exception_info\": {\n                \"raised_exception\": false,\n                \"exception_traceback\": null,\n                \"exception_message\": null\n              },\n              \"result\": {\n                \"observed_value\": [\n                  1,\n                  2,\n                  4\n                ],\n                \"details\": {\n                  \"value_counts\": [\n                    {\n                      \"value\": 1,\n                      \"count\": 1\n                    },\n                    {\n                      \"value\": 2,\n                      \"count\": 1\n                    },\n                    {\n                      \"value\": 4,\n                      \"count\": 1\n                    }\n                  ]\n                }\n              },\n              \"meta\": {},\n              \"success\": true\n            }\n\n    Failing Case:\n        Input:\n            ExpectColumnDistinctValuesToEqualSet(\n                column=\"test2\",\n                value_set=[3, 2, 4]\n            )\n\n        Output:\n            {\n              \"exception_info\": {\n                \"raised_exception\": false,\n                \"exception_traceback\": null,\n                \"exception_message\": null\n              },\n              \"result\": {\n                \"observed_value\": [\n                  1\n                ],\n                \"details\": {\n                  \"value_counts\": [\n                    {\n                      \"value\": 1,\n                      \"count\": 3\n                    }\n                  ]\n                }\n              },\n              \"meta\": {},\n              \"success\": false\n            }",
    "type": "object",
    "properties": {
        "id": {
            "title": "Id",
            "type": "string"
        },
        "meta": {
            "title": "Meta",
            "type": "object"
        },
        "notes": {
            "title": "Notes",
            "anyOf": [
                {
                    "type": "string"
                },
                {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            ]
        },
        "result_format": {
            "title": "Result Format",
            "default": "BASIC",
            "anyOf": [
                {
                    "$ref": "#/definitions/ResultFormat"
                },
                {
                    "type": "object"
                }
            ]
        },
        "description": {
            "title": "Description",
            "description": "A short description of your Expectation",
            "type": "string"
        },
        "catch_exceptions": {
            "title": "Catch Exceptions",
            "default": false,
            "type": "boolean"
        },
        "rendered_content": {
            "title": "Rendered Content",
            "type": "array",
            "items": {
                "type": "object"
            }
        },
        "windows": {
            "title": "Windows",
            "description": "Definition(s) for evaluation of temporal windows",
            "type": "array",
            "items": {
                "$ref": "#/definitions/Window"
            }
        },
        "batch_id": {
            "title": "Batch Id",
            "type": "string"
        },
        "column": {
            "title": "Column",
            "description": "The column name.",
            "minLength": 1,
            "type": "string"
        },
        "row_condition": {
            "title": "Row Condition",
            "type": "string"
        },
        "condition_parser": {
            "$ref": "#/definitions/ConditionParser"
        },
        "value_set": {
            "title": "Value Set",
            "description": "A set of objects used for comparison.",
            "anyOf": [
                {
                    "title": "Value Set",
                    "description": "A set of objects used for comparison.",
                    "oneOf": [
                        {
                            "title": "Text",
                            "type": "array",
                            "items": {
                                "type": "string",
                                "minLength": 1
                            },
                            "minItems": 1,
                            "examples": [
                                [
                                    "a",
                                    "b",
                                    "c",
                                    "d",
                                    "e"
                                ],
                                [
                                    "2024-01-01",
                                    "2024-01-02",
                                    "2024-01-03",
                                    "2024-01-04",
                                    "2024-01-05"
                                ]
                            ]
                        },
                        {
                            "title": "Numbers",
                            "type": "array",
                            "items": {
                                "type": "number"
                            },
                            "minItems": 1,
                            "examples": [
                                [
                                    1,
                                    2,
                                    3,
                                    4,
                                    5
                                ],
                                [
                                    1.1,
                                    2.2,
                                    3.3,
                                    4.4,
                                    5.5
                                ],
                                [
                                    1,
                                    2.2,
                                    3,
                                    4.4,
                                    5
                                ]
                            ]
                        }
                    ]
                },
                {
                    "type": "object"
                }
            ]
        },
        "metadata": {
            "type": "object",
            "properties": {
                "expectation_class": {
                    "title": "Expectation Class",
                    "type": "string",
                    "const": "ExpectColumnDistinctValuesToEqualSet"
                },
                "expectation_type": {
                    "title": "Expectation Type",
                    "type": "string",
                    "const": "expect_column_distinct_values_to_equal_set"
                },
                "domain_type": {
                    "title": "Domain Type",
                    "type": "string",
                    "const": "column",
                    "description": "Column Aggregate"
                },
                "data_quality_issues": {
                    "title": "Data Quality Issues",
                    "type": "array",
                    "const": [
                        "Sets"
                    ]
                },
                "library_metadata": {
                    "title": "Library Metadata",
                    "type": "object",
                    "const": {
                        "maturity": "production",
                        "tags": [
                            "core expectation",
                            "column aggregate expectation"
                        ],
                        "contributors": [
                            "@great_expectations"
                        ],
                        "requirements": [],
                        "has_full_test_suite": true,
                        "manually_reviewed_code": true
                    }
                },
                "short_description": {
                    "title": "Short Description",
                    "type": "string",
                    "const": "Expect the set of distinct column values to equal a given set."
                },
                "supported_data_sources": {
                    "title": "Supported Data Sources",
                    "type": "array",
                    "const": [
                        "Pandas",
                        "Spark",
                        "SQLite",
                        "PostgreSQL",
                        "MySQL",
                        "MSSQL",
                        "Redshift",
                        "BigQuery",
                        "Snowflake"
                    ]
                }
            }
        }
    },
    "required": [
        "column"
    ],
    "additionalProperties": false,
    "definitions": {
        "ResultFormat": {
            "title": "ResultFormat",
            "description": "An enumeration.",
            "enum": [
                "BOOLEAN_ONLY",
                "BASIC",
                "COMPLETE",
                "SUMMARY"
            ],
            "type": "string"
        },
        "Offset": {
            "title": "Offset",
            "description": "A threshold in which a metric will be considered passable",
            "type": "object",
            "properties": {
                "positive": {
                    "title": "Positive",
                    "type": "number"
                },
                "negative": {
                    "title": "Negative",
                    "type": "number"
                }
            },
            "required": [
                "positive",
                "negative"
            ],
            "additionalProperties": false
        },
        "Window": {
            "title": "Window",
            "description": "A definition for a temporal window across <`range`> number of previous invocations",
            "type": "object",
            "properties": {
                "constraint_fn": {
                    "title": "Constraint Fn",
                    "type": "string"
                },
                "parameter_name": {
                    "title": "Parameter Name",
                    "type": "string"
                },
                "range": {
                    "title": "Range",
                    "type": "integer"
                },
                "offset": {
                    "$ref": "#/definitions/Offset"
                }
            },
            "required": [
                "constraint_fn",
                "parameter_name",
                "range",
                "offset"
            ],
            "additionalProperties": false
        },
        "ConditionParser": {
            "title": "ConditionParser",
            "description": "Type of parser to be used to interpret a Row Condition.",
            "enum": [
                "great_expectations__experimental__",
                "pandas",
                "spark"
            ],
            "type": "string"
        }
    }
}
