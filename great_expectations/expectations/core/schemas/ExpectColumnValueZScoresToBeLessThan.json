{
    "title": "Expect column value z-scores to be less than",
    "description": "Expect the Z-scores of a column's values to be less than a given threshold.\n\nExpectColumnValueZScoresToBeLessThan is a     Column Map Expectation     for typed-column backends, and also for PandasExecutionEngine where the column     dtype and provided type_ are unambiguous constraints     (any dtype except 'object' or dtype of 'object' with type_ specified as 'object').\n\nColumn Map Expectations are one of the most common types of Expectation.\nThey are evaluated for a single column and ask a yes/no question for every row in that column.\nBased on the result, they then calculate the percentage of rows that gave a positive answer. If the percentage is high enough, the Expectation considers that data valid.\n\nArgs:\n    column (str):             The column name.\n    threshold (number):             A maximum Z-score threshold. All column Z-scores that are lower than this threshold will evaluate successfully.\n    double_sided (boolean):             A True or False value indicating whether to evaluate double sidedly. Examples: (double_sided = True, threshold = 2) -> Z scores in non-inclusive interval(-2,2) | (double_sided = False, threshold = 2) -> Z scores in non-inclusive interval (-infinity,2)\n\nOther Parameters:\n    mostly (None or a float between 0 and 1):             Successful if at least `mostly` fraction of values match the expectation.             For more detail, see [mostly](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#mostly). Default 1.\n    result_format (str or None):             Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY.             For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n    catch_exceptions (boolean or None):             If True, then catch exceptions and include them as part of the result object.             For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n    meta (dict or None):             A JSON-serializable dictionary (nesting allowed) that will be included in the output without             modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\nReturns:\n    An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\n    Exact fields vary depending on the values passed to result_format, catch_exceptions, and meta.\n\nSupported Datasources:\n    [Pandas](https://docs.greatexpectations.io/docs/application_integration_support/)\n    [Spark](https://docs.greatexpectations.io/docs/application_integration_support/)\n    [SQLite](https://docs.greatexpectations.io/docs/application_integration_support/)\n    [PostgreSQL](https://docs.greatexpectations.io/docs/application_integration_support/)\n    [MySQL](https://docs.greatexpectations.io/docs/application_integration_support/)\n    [MSSQL](https://docs.greatexpectations.io/docs/application_integration_support/)\n    [Redshift](https://docs.greatexpectations.io/docs/application_integration_support/)\n    [BigQuery](https://docs.greatexpectations.io/docs/application_integration_support/)\n    [Snowflake](https://docs.greatexpectations.io/docs/application_integration_support/)\n\nData Quality Category:\n    Distribution\n\nExample Data:\n            test    test2\n        0   1       -100000000000\n        1   1       -1\n        2   1       0\n        3   3       1\n        4   3       1\n\nCode Examples:\n    Passing Case:\n        Input:\n            ExpectColumnValueZScoresToBeLessThan(\n                column=\"test\",\n                threshold=1.96,\n                double_sided=True\n        )\n\n        Output:\n            {\n              \"exception_info\": {\n                \"raised_exception\": false,\n                \"exception_traceback\": null,\n                \"exception_message\": null\n              },\n              \"result\": {\n                \"element_count\": 5,\n                \"unexpected_count\": 0,\n                \"unexpected_percent\": 0.0,\n                \"partial_unexpected_list\": [],\n                \"missing_count\": 0,\n                \"missing_percent\": 0.0,\n                \"unexpected_percent_total\": 0.0,\n                \"unexpected_percent_nonmissing\": 0.0\n              },\n              \"meta\": {},\n              \"success\": true\n            }\n\n    Failing Case:\n        Input:\n            ExpectColumnValueZScoresToBeLessThan(\n                column=\"test2\",\n                threshold=1,\n                double_sided=True\n        )\n\n        Output:\n            {\n              \"exception_info\": {\n                \"raised_exception\": false,\n                \"exception_traceback\": null,\n                \"exception_message\": null\n              },\n              \"result\": {\n                \"element_count\": 5,\n                \"unexpected_count\": 1,\n                \"unexpected_percent\": 20.0,\n                \"partial_unexpected_list\": [\n                  -100000000000\n                ],\n                \"missing_count\": 0,\n                \"missing_percent\": 0.0,\n                \"unexpected_percent_total\": 20.0,\n                \"unexpected_percent_nonmissing\": 20.0\n              },\n              \"meta\": {},\n              \"success\": false\n            }",
    "type": "object",
    "properties": {
        "id": {
            "title": "Id",
            "type": "string"
        },
        "meta": {
            "title": "Meta",
            "type": "object"
        },
        "notes": {
            "title": "Notes",
            "anyOf": [
                {
                    "type": "string"
                },
                {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            ]
        },
        "result_format": {
            "title": "Result Format",
            "default": "BASIC",
            "anyOf": [
                {
                    "$ref": "#/definitions/ResultFormat"
                },
                {
                    "type": "object"
                }
            ]
        },
        "description": {
            "title": "Description",
            "description": "A short description of your Expectation",
            "type": "string"
        },
        "catch_exceptions": {
            "title": "Catch Exceptions",
            "default": true,
            "type": "boolean"
        },
        "rendered_content": {
            "title": "Rendered Content",
            "type": "array",
            "items": {
                "type": "object"
            }
        },
        "windows": {
            "title": "Windows",
            "description": "Definition(s) for evaluation of temporal windows",
            "type": "array",
            "items": {
                "$ref": "#/definitions/Window"
            }
        },
        "batch_id": {
            "title": "Batch Id",
            "type": "string"
        },
        "column": {
            "title": "Column",
            "description": "The column name.",
            "minLength": 1,
            "type": "string"
        },
        "mostly": {
            "title": "Mostly",
            "default": 1.0,
            "description": "Successful if at least `mostly` fraction of values match the expectation.",
            "type": "number",
            "minimum": 0.0,
            "maximum": 1.0,
            "multipleOf": 0.01
        },
        "row_condition": {
            "title": "Row Condition",
            "type": "string"
        },
        "condition_parser": {
            "$ref": "#/definitions/ConditionParser"
        },
        "threshold": {
            "title": "Threshold",
            "description": "A maximum Z-score threshold. All column Z-scores that are lower than this threshold will evaluate successfully.",
            "anyOf": [
                {
                    "type": "number"
                },
                {
                    "type": "object"
                }
            ]
        },
        "double_sided": {
            "title": "Double Sided",
            "description": "A True or False value indicating whether to evaluate double sidedly. Examples: (double_sided = True, threshold = 2) -> Z scores in non-inclusive interval(-2,2) | (double_sided = False, threshold = 2) -> Z scores in non-inclusive interval (-infinity,2)",
            "anyOf": [
                {
                    "type": "boolean"
                },
                {
                    "type": "object"
                }
            ]
        },
        "metadata": {
            "type": "object",
            "properties": {
                "expectation_class": {
                    "title": "Expectation Class",
                    "type": "string",
                    "const": "ExpectColumnValueZScoresToBeLessThan"
                },
                "expectation_type": {
                    "title": "Expectation Type",
                    "type": "string",
                    "const": "expect_column_value_z_scores_to_be_less_than"
                },
                "domain_type": {
                    "title": "Domain Type",
                    "type": "string",
                    "const": "column",
                    "description": "Column Map"
                },
                "data_quality_issues": {
                    "title": "Data Quality Issues",
                    "type": "array",
                    "const": [
                        "Distribution"
                    ]
                },
                "library_metadata": {
                    "title": "Library Metadata",
                    "type": "object",
                    "const": {
                        "maturity": "production",
                        "tags": [
                            "core expectation",
                            "column map expectation"
                        ],
                        "contributors": [
                            "@great_expectations"
                        ],
                        "requirements": [],
                        "has_full_test_suite": true,
                        "manually_reviewed_code": true
                    }
                },
                "short_description": {
                    "title": "Short Description",
                    "type": "string",
                    "const": "Expect the Z-scores of a column's values to be less than a given threshold."
                },
                "supported_data_sources": {
                    "title": "Supported Data Sources",
                    "type": "array",
                    "const": [
                        "Pandas",
                        "Spark",
                        "SQLite",
                        "PostgreSQL",
                        "MySQL",
                        "MSSQL",
                        "Redshift",
                        "BigQuery",
                        "Snowflake"
                    ]
                }
            }
        }
    },
    "required": [
        "column",
        "threshold",
        "double_sided"
    ],
    "additionalProperties": false,
    "definitions": {
        "ResultFormat": {
            "title": "ResultFormat",
            "description": "An enumeration.",
            "enum": [
                "BOOLEAN_ONLY",
                "BASIC",
                "COMPLETE",
                "SUMMARY"
            ],
            "type": "string"
        },
        "Offset": {
            "title": "Offset",
            "description": "A threshold in which a metric will be considered passable",
            "type": "object",
            "properties": {
                "positive": {
                    "title": "Positive",
                    "type": "number"
                },
                "negative": {
                    "title": "Negative",
                    "type": "number"
                }
            },
            "required": [
                "positive",
                "negative"
            ],
            "additionalProperties": false
        },
        "Window": {
            "title": "Window",
            "description": "A definition for a temporal window across <`range`> number of previous invocations",
            "type": "object",
            "properties": {
                "constraint_fn": {
                    "title": "Constraint Fn",
                    "type": "string"
                },
                "parameter_name": {
                    "title": "Parameter Name",
                    "type": "string"
                },
                "range": {
                    "title": "Range",
                    "type": "integer"
                },
                "offset": {
                    "$ref": "#/definitions/Offset"
                }
            },
            "required": [
                "constraint_fn",
                "parameter_name",
                "range",
                "offset"
            ],
            "additionalProperties": false
        },
        "ConditionParser": {
            "title": "ConditionParser",
            "description": "Type of parser to be used to interpret a Row Condition.",
            "enum": [
                "great_expectations",
                "great_expectations__experimental__",
                "pandas",
                "spark"
            ],
            "type": "string"
        }
    }
}
