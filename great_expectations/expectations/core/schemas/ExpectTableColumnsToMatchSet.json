{
    "title": "Expect table columns to match set",
    "description": "Expect the columns in a table to match an unordered set.\n\nExpectTableColumnsToMatchSet is a     Batch Expectation.\n\nBatchExpectations are one of the most common types of Expectation.\nThey are evaluated for an entire Batch, and answer a semantic question about the Batch itself.\n\nArgs:\n    column_set (list of str): The column names, in any order.\n    exact_match (boolean):             If True, the list of columns must exactly match the observed columns. If False, observed columns must include column_set but additional columns will pass. Default True.\n\nOther Parameters:\n    result_format (str or None):             Which output mode to use: BOOLEAN_ONLY, BASIC, COMPLETE, or SUMMARY.             For more detail, see [result_format](https://docs.greatexpectations.io/docs/reference/expectations/result_format).\n    catch_exceptions (boolean or None):             If True, then catch exceptions and include them as part of the result object.             For more detail, see [catch_exceptions](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#catch_exceptions).\n    meta (dict or None):             A JSON-serializable dictionary (nesting allowed) that will be included in the output without             modification. For more detail, see [meta](https://docs.greatexpectations.io/docs/reference/expectations/standard_arguments/#meta).\n\nReturns:\n    An [ExpectationSuiteValidationResult](https://docs.greatexpectations.io/docs/terms/validation_result)\n\n    Exact fields vary depending on the values passed to result_format, catch_exceptions, and meta.\n\nSupported Datasources:\n    [Pandas](https://docs.greatexpectations.io/docs/application_integration_support/)\n    [Spark](https://docs.greatexpectations.io/docs/application_integration_support/)\n    [SQLite](https://docs.greatexpectations.io/docs/application_integration_support/)\n    [PostgreSQL](https://docs.greatexpectations.io/docs/application_integration_support/)\n    [MySQL](https://docs.greatexpectations.io/docs/application_integration_support/)\n    [MSSQL](https://docs.greatexpectations.io/docs/application_integration_support/)\n    [Redshift](https://docs.greatexpectations.io/docs/application_integration_support/)\n    [BigQuery](https://docs.greatexpectations.io/docs/application_integration_support/)\n    [Snowflake](https://docs.greatexpectations.io/docs/application_integration_support/)\n\nData Quality Category:\n    Schema\n\nExample Data:\n            test    test2\n        0   1.00    2\n        1   2.30    5\n        2   4.33    0\n\nCode Examples:\n    Passing Case:\n        Input:\n            ExpectTableColumnsToMatchSet(\n                column_set=[\"test\"],\n                exact_match=False\n        )\n\n        Output:\n            {\n              \"exception_info\": {\n                \"raised_exception\": false,\n                \"exception_traceback\": null,\n                \"exception_message\": null\n              },\n              \"result\": {\n                \"observed_value\": [\n                  \"test\",\n                  \"test2\"\n                ],\n                \"details\": {\n                  \"mismatched\": {\n                    \"unexpected\": [\n                      \"test2\"\n                    ]\n                  }\n                }\n              },\n              \"meta\": {},\n              \"success\": true\n            }\n\n    Failing Case:\n        Input:\n            ExpectTableColumnsToMatchSet(\n                column_set=[\"test2\", \"test3\"],\n                exact_match=True\n        )\n\n        Output:\n            {\n              \"exception_info\": {\n                \"raised_exception\": false,\n                \"exception_traceback\": null,\n                \"exception_message\": null\n              },\n              \"result\": {\n                \"observed_value\": [\n                  \"test\",\n                  \"test2\"\n                ],\n                \"details\": {\n                  \"mismatched\": {\n                    \"unexpected\": [\n                      \"test\"\n                    ],\n                    \"missing\": [\n                      \"test3\"\n                    ]\n                  }\n                }\n              },\n              \"meta\": {},\n              \"success\": false\n            }",
    "type": "object",
    "properties": {
        "id": {
            "title": "Id",
            "type": "string"
        },
        "meta": {
            "title": "Meta",
            "type": "object"
        },
        "notes": {
            "title": "Notes",
            "anyOf": [
                {
                    "type": "string"
                },
                {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            ]
        },
        "result_format": {
            "title": "Result Format",
            "default": "BASIC",
            "anyOf": [
                {
                    "$ref": "#/definitions/ResultFormat"
                },
                {
                    "type": "object"
                }
            ]
        },
        "description": {
            "title": "Description",
            "description": "A short description of your Expectation",
            "type": "string"
        },
        "catch_exceptions": {
            "title": "Catch Exceptions",
            "default": false,
            "type": "boolean"
        },
        "rendered_content": {
            "title": "Rendered Content",
            "type": "array",
            "items": {
                "type": "object"
            }
        },
        "windows": {
            "title": "Windows",
            "description": "Definition(s) for evaluation of temporal windows",
            "type": "array",
            "items": {
                "$ref": "#/definitions/Window"
            }
        },
        "batch_id": {
            "title": "Batch Id",
            "type": "string"
        },
        "column_set": {
            "title": "Column Set",
            "description": "The column names, in any order.",
            "anyOf": [
                {
                    "type": "array",
                    "items": {}
                },
                {
                    "type": "array",
                    "items": {},
                    "uniqueItems": true
                },
                {
                    "type": "object"
                }
            ]
        },
        "exact_match": {
            "title": "Exact Match",
            "description": "If True, the list of columns must exactly match the observed columns. If False, observed columns must include column_set but additional columns will pass.",
            "type": "boolean"
        },
        "metadata": {
            "type": "object",
            "properties": {
                "expectation_class": {
                    "title": "Expectation Class",
                    "type": "string",
                    "const": "ExpectTableColumnsToMatchSet"
                },
                "expectation_type": {
                    "title": "Expectation Type",
                    "type": "string",
                    "const": "expect_table_columns_to_match_set"
                },
                "domain_type": {
                    "title": "Domain Type",
                    "type": "string",
                    "const": "table",
                    "description": "Batch"
                },
                "data_quality_issues": {
                    "title": "Data Quality Issues",
                    "type": "array",
                    "const": [
                        "Schema"
                    ]
                },
                "library_metadata": {
                    "title": "Library Metadata",
                    "type": "object",
                    "const": {
                        "maturity": "production",
                        "tags": [
                            "core expectation",
                            "table expectation"
                        ],
                        "contributors": [
                            "@great_expectations"
                        ],
                        "requirements": [],
                        "has_full_test_suite": true,
                        "manually_reviewed_code": true
                    }
                },
                "short_description": {
                    "title": "Short Description",
                    "type": "string",
                    "const": "Expect the columns in a table to match an unordered set."
                },
                "supported_data_sources": {
                    "title": "Supported Data Sources",
                    "type": "array",
                    "const": [
                        "Pandas",
                        "Spark",
                        "SQLite",
                        "PostgreSQL",
                        "MySQL",
                        "MSSQL",
                        "Redshift",
                        "BigQuery",
                        "Snowflake"
                    ]
                }
            }
        }
    },
    "additionalProperties": false,
    "definitions": {
        "ResultFormat": {
            "title": "ResultFormat",
            "description": "An enumeration.",
            "enum": [
                "BOOLEAN_ONLY",
                "BASIC",
                "COMPLETE",
                "SUMMARY"
            ],
            "type": "string"
        },
        "Offset": {
            "title": "Offset",
            "description": "A threshold in which a metric will be considered passable",
            "type": "object",
            "properties": {
                "positive": {
                    "title": "Positive",
                    "type": "number"
                },
                "negative": {
                    "title": "Negative",
                    "type": "number"
                }
            },
            "required": [
                "positive",
                "negative"
            ],
            "additionalProperties": false
        },
        "Window": {
            "title": "Window",
            "description": "A definition for a temporal window across <`range`> number of previous invocations",
            "type": "object",
            "properties": {
                "constraint_fn": {
                    "title": "Constraint Fn",
                    "type": "string"
                },
                "parameter_name": {
                    "title": "Parameter Name",
                    "type": "string"
                },
                "range": {
                    "title": "Range",
                    "type": "integer"
                },
                "offset": {
                    "$ref": "#/definitions/Offset"
                }
            },
            "required": [
                "constraint_fn",
                "parameter_name",
                "range",
                "offset"
            ],
            "additionalProperties": false
        }
    }
}
